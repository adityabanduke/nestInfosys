AWSTemplateFormatVersion: '2010-09-09'
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST 
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: NestJS-DynamoDB

  # --------------------------------------------------------------------------------------

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !GetAtt UsersTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                

  # ---------------------------------------------------------------------------------------------------

  UsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UsersLambdaFunction
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const { 
              DynamoDBClient, GetItemCommand, PutItemCommand, 
              UpdateItemCommand, DeleteItemCommand, ScanCommand 
          } = require("@aws-sdk/client-dynamodb");

          const client = new DynamoDBClient({ region: process.env.AWS_REGION || "ap-south-1" });
          const TABLE_NAME = process.env.DYNAMODB_TABLE || "Users";

          exports.handler = async (event) => {
              console.log("Received event:", JSON.stringify(event, null, 2));
              let response;

              try {
                  const method = event.requestContext?.http?.method;

                  switch (method) {
                      case "POST": 
                          const newUser = JSON.parse(event.body);

                          if (!newUser.email || !newUser.name || !newUser.password) {
                              return { statusCode: 400, body: JSON.stringify({ message: "Missing required fields" }) };
                          }

                          await client.send(new PutItemCommand({
                              TableName: TABLE_NAME,
                              Item: {
                                  email: { S: newUser.email },
                                  name: { S: newUser.name },
                                  password: { S: newUser.password }
                              },
                              ConditionExpression: "attribute_not_exists(email)" // Prevent duplicate email
                          }));
                          response = { statusCode: 201, body: JSON.stringify({ message: "User created" }) };
                          break;

                      case "GET": 
                          if (event.queryStringParameters?.email) {
                              const result = await client.send(new GetItemCommand({
                                  TableName: TABLE_NAME,
                                  Key: { email: { S: event.queryStringParameters.email } }
                              }));

                              if (!result.Item) {
                                  return { statusCode: 404, body: JSON.stringify({ message: "User not found" }) };
                              }

                              response = { statusCode: 200, body: JSON.stringify(result.Item) };
                          } else {
                              const result = await client.send(new ScanCommand({ TableName: TABLE_NAME }));
                              response = { statusCode: 200, body: JSON.stringify(result.Items || []) };
                          }
                          break;

                      case "PUT": 
                          const updateUser = JSON.parse(event.body);

                          if (!updateUser.email || (!updateUser.name && !updateUser.password)) {
                              return { statusCode: 400, body: JSON.stringify({ message: "Missing required fields" }) };
                          }

                          // Check if user exists before updating
                          const existingUser = await client.send(new GetItemCommand({
                              TableName: TABLE_NAME,
                              Key: { email: { S: updateUser.email } }
                          }));

                          if (!existingUser.Item) {
                              return { statusCode: 404, body: JSON.stringify({ message: "User not found" }) };
                          }

                          let updateExpression = "SET";
                          let expressionValues = {};
                          let expressionNames = {};

                          if (updateUser.name) {
                              updateExpression += " #name = :name,";
                              expressionNames["#name"] = "name";
                              expressionValues[":name"] = { S: updateUser.name };
                          }

                          if (updateUser.password) {
                              updateExpression += " password = :password,";
                              expressionValues[":password"] = { S: updateUser.password };
                          }

                          updateExpression = updateExpression.replace(/,$/, ""); // Remove last comma

                          await client.send(new UpdateItemCommand({
                              TableName: TABLE_NAME,
                              Key: { email: { S: updateUser.email } },
                              UpdateExpression: updateExpression,
                              ExpressionAttributeNames: expressionNames,
                              ExpressionAttributeValues: expressionValues,
                          }));

                          response = { statusCode: 200, body: JSON.stringify({ message: "User updated" }) };
                          break;

                      case "DELETE": 
                          if (!event.queryStringParameters?.email) {
                              return { statusCode: 400, body: JSON.stringify({ message: "Email is required for deletion" }) };
                          }

                          // Check if user exists before deleting
                          const userToDelete = await client.send(new GetItemCommand({
                              TableName: TABLE_NAME,
                              Key: { email: { S: event.queryStringParameters.email } }
                          }));

                          if (!userToDelete.Item) {
                              return { statusCode: 404, body: JSON.stringify({ message: "User not found" }) };
                          }

                          await client.send(new DeleteItemCommand({
                              TableName: TABLE_NAME,
                              Key: { email: { S: event.queryStringParameters.email } }
                          }));

                          response = { statusCode: 200, body: JSON.stringify({ message: "User deleted" }) };
                          break;

                      default:
                          response = { statusCode: 400, body: JSON.stringify({ message: "Unsupported HTTP method" }) };
                  }
              } catch (error) {
                  console.error("Error:", error);
                  response = { statusCode: 500, body: JSON.stringify({ message: error.message }) };
              }

              return response;
          };
      Timeout: 10
      MemorySize: 128 # ✅ Keeps it Free-tier
      TracingConfig:
        Mode: PassThrough # ✅ Disables expensive X-Ray tracing

  # --------------------------------------------------------------------------------------

  UsersLambdaApiGateway:
    Type: AWS::ApiGatewayV2::Api # ✅ Using HTTP API (cheaper than REST API)
    Properties:
      Name: UsersLambdaHTTPAPI
      ProtocolType: HTTP
      CorsConfiguration: # ✅ Enable CORS (optional)
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE

  UsersLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref UsersLambdaApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt UsersLambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  UsersLambdaRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref UsersLambdaApiGateway
      RouteKey: ANY /users
      Target: !Sub 'integrations/${UsersLambdaIntegration}'

  UsersLambdaStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref UsersLambdaApiGateway
      StageName: dev
      AutoDeploy: true

  UsersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UsersLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UsersLambdaApiGateway}/*'
